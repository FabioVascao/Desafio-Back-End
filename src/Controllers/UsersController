const {hash, compare, genSalt} = require("bcryptjs");
const AppError = require("../utils/AppError");
const knex = require("../database/knex");
const sqliteConnection = require("../database/sqlite");

class UsersController {
    async create(request, response) {
        const {Name, Email, Password} = request.body;

        const database = await sqliteConnection();
        const checkUserExist = await database.get("SELECT * FROM users WHERE email = (?)", [Email]);

        if(checkUserExist) {
            throw new AppError("Este email ja está em uso.");
        }

        const hashedPassword = await hash(Password, 8);

        await database.run("INSERT INTO users (Name, Email, Password) VALUES (?, ?, ?)", [Name, Email, hashedPassword]);

        return response.status(201).json();  
    }

    async update(request, response) {
        
        const {Name, Email, Password, OldPassword} = request.body;
        const name = Name;
        const email = Email;
        const password = Password;
        const oldpassword = OldPassword;
        const { id } = request.params;

        console.log(name, email, password, oldpassword)
        
        const database = await sqliteConnection();
        const user = await database.get("SELECT * FROM users WHERE id = (?)", [id]);

        if(!user) {
            throw new AppError("Usuário não encontrado.");
        }

        const userWithUpdatedEmail = await database.get("SELECT * FROM users WHERE Email = (?)", [email]);

        if(userWithUpdatedEmail && userWithUpdatedEmail.id !== user.id){
            throw new AppError("Este email ja está em uso.");
        }

        user.name = name ?? user.name;
        user.email = email ?? user.email;

        if(password && !oldpassword){
            throw new AppError("Você precisa informar a senha antiga.")
        }

        if(password && oldpassword){
            const checkOldPassword = await compare(oldpassword, user.password);

            if(!checkOldPassword) {
                throw new AppError("Senha antiga não confere.");
            }

            user.password = await hash(password, 8);
        }

        await database.run(`
            UPDATE users SET
            Name = ?,
            Email = ?,
            Password = ?,
            updated_at = DATETIME('now')
            WHERE id = ?`,
            [user.name, user.email, user.password, id]);

            return response.status(200).json();
    }   
}

module.exports = UsersController;