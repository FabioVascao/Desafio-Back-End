const knex = require("../database/knex");
const AppError = require("../utils/AppError");
const sqliteConnection = require("../database/sqlite");

class NotesController{
    async create(request, response) {
        const {Title, Description, Rating} = request.body;
        const {user_id} = request.params;

        if(Rating <= 0 || Rating > 5) {
            throw new AppError("O Rating do filme deve estar entre 1 e 5");
        } else {
            const movies_note_id = await knex("movies_notes").insert({
                Title,
                Description,
                Rating,
                user_id
            });
        }

        response.json();
    }

    async show(request, response) {
        const {id} = request.params;

        const movies_note = await knex("movies_notes").where({id}).first();

        return response.json({
            movies_note,
        });
    }

    async delete(request, response) {
        const {id} = request.params;

        await knex("movies_notes").where({id}).delete();

        return response.json();
    }

    async index(request, response) {
        const { user_id, movies_notes_id } = request.query; 
        const note = await knex("movies_notes")
        .where({ user_id })
        .orderBy("title");
        
        const database = await sqliteConnection();
        const notesId = await database.get("SELECT id FROM movies_notes WHERE id = (?)", [movies_notes_id]);
        const userTags = await knex("Movies_Tags").where({user_id});
        const notesWithTags = note.map(note => {
            const noteTags = userTags.filter(tags => tags.movies_notes_id === note.id);

            return { 
                ...note,
                tags: noteTags
            }
        });

        return response.json(notesWithTags);
    }
}

module.exports = NotesController;